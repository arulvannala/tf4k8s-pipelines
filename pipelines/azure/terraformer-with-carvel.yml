resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ((terraform_resource_with_carvel_image))
    tag: latest
    username: ((registry_username))
    password: ((registry_password))

- name: abs-resource
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource
    tag: latest

resources:
# The repo that contains Terraform
- name: pipeline-repo
  type: git
  icon: github
  source:
    uri: https://github.com/pacphi/tf4k8s-pipelines.git
    branch: ((pipeline_repo_branch))

- name: terraform-state
  type: terraform
  source:
    env_name: ((environment_name))
    backend_type: azurerm
    backend_config:
      storage_account_name: tf4k8s-pipelines-state
      container_name: ((environment_name))/terraform/((azure_storage_bucket_folder))
      client_id: ((azure_client_id))
      tenant_id: ((azure_tenant_id)
      subscription_id: ((azure_subscription_id))

- name: kubeconfig
  type: gcs-resource
  source:
    bucket: s3cr3ts
    json_key: ((gcp_account_key_json))
    versioned_file: ((environment_name))/.kube/config

- name: terraform-vars
  type: abs-resource
  source:
    storage_account_name: tf4k8s-pipelines-config
    storage_account_key: ((storage_account_key))
    container: ((environment_name))/terraform/((azure_storage_bucket_folder))
    versioned_file: terraform.tfvars

jobs:
- name: terraform-plan
  plan:
  - get: pipeline-repo
    trigger: true     
  - get: kubeconfig
    trigger: true
  - get: terraform-vars
    trigger: true
  - put: terraform-state
    params:
      terraform_source: pipeline-repo/terraform/((terraform_module))
      plan_only: true
      var_files: [terraform-vars/terraform.tfvars]
        
- name: terraform-apply
  plan:
  - get: pipeline-repo
    trigger: false
    passed: [terraform-plan]
  - get: kubeconfig
    trigger: false
    passed: [terraform-plan]
  - get: terraform-state
    trigger: false
    passed: [terraform-plan]
  - put: terraform-state
    params:
      terraform_source: pipeline-repo/terraform/((terraform_module))
      plan_run: true

- name: terraform-destroy
  plan:
  - get: pipeline-repo
    trigger: false
    passed: [terraform-apply]
  - get: kubeconfig
    trigger: false
    passed: [terraform-apply]
  - get: terraform-vars
    trigger: false
  - get: terraform-state
    trigger: false
    passed: [terraform-apply]
  - put: terraform-state
    params:
      terraform_source: pipeline-repo/terraform/((terraform_module))
      action: destroy
      var_files: [terraform-vars/terraform.tfvars]
    get_params:
      action: destroy