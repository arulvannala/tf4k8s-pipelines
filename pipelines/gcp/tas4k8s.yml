resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ((terraform_resource_with_carvel_image))
    tag: latest
    username: ((registry_username))
    password: ((registry_password))

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
    tag: v0.6.0

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: v2.0.1

resources:
- name: pipeline-repo
  type: git
  icon: github
  source:
    uri: https://github.com/pacphi/tf4k8s-pipelines.git
    branch: ((pipeline_repo_branch))

- name: scripts-repo
  type: git
  icon: github
  source:
    uri: https://github.com/pacphi/tf4k8s.git
    branch: ((scripts_repo_branch))

- name: tas4k8s-distro
  type: pivnet
  source:
    api_token: ((tanzu_network_api_token))
    product_slug: tas-for-kubernetes
    product_version: ((product_version))

- name: acme-tfvars
  type: gcs-resource
  source:
    bucket: tf4k8s-pipelines-config
    json_key: ((gcp_account_key_json))
    versioned_file: ((environment_name))/terraform/k8s/tas4k8s/acme/terraform.tfvars

- name: ck
  type: gcs-resource
  source:
    bucket: tf4k8s-pipelines-config
    json_key: ((gcp_account_key_json))
    versioned_file: ((environment_name))/terraform/k8s/tas4k8s/certs-and-keys.vars

- name: acme-tf-state
  type: terraform
  source:
    env_name: ((environment_name))
    backend_type: gcs
    backend_config:
      bucket: tf4k8s-pipelines-state
      prefix: ((environment_name))/terraform/k8s/tas4k8s/acme
      credentials: ((gcp_account_key_json))
    env:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/build/put/gcloud-credentials/gcp-credentials.json

- name: tas4k8s-tfvars
  type: gcs-resource
  source:
    bucket: tf4k8s-pipelines-config
    json_key: ((gcp_account_key_json))
    versioned_file: ((environment_name))/terraform/k8s/tas4k8s/terraform.tfvars

- name: tas4k8s-tf-state
  type: terraform
  source:
    env_name: ((environment_name))
    backend_type: gcs
    backend_config:
      bucket: tf4k8s-pipelines-state
      prefix: ((environment_name))/terraform/k8s/tas4k8s
      credentials: ((gcp_account_key_json))

- name: gcloud-credentials
  type: gcs-resource
  source:
    bucket: s3cr3ts
    json_key: ((gcp_account_key_json))
    versioned_file: gcp-credentials.json

- name: kubeconfig
  type: gcs-resource
  source:
    bucket: s3cr3ts
    json_key: ((gcp_account_key_json))
    versioned_file: ((environment_name))/.kube/config

jobs:
- name: acme-tf-plan
  plan:
  - get: pipeline-repo
    trigger: true
  - get: gcloud-credentials
    trigger: true
  - get: acme-tfvars
    trigger: true
  - put: acme-tf-state
    params:
      terraform_source: pipeline-repo/terraform/gcp/tas4k8s/acme
      plan_only: true
      var_files: [acme-tfvars/terraform.tfvars]
        
- name: acme-tf-apply
  plan:
  - get: pipeline-repo
    trigger: true
    passed: [acme-tf-plan]
  - get: gcloud-credentials
    trigger: true
    passed: [acme-tf-plan]
  - get: acme-tf-state
    trigger: true
    passed: [acme-tf-plan]
  - put: acme-tf-state
    params:
      terraform_source: pipeline-repo/terraform/gcp/tas4k8s/acme
      plan_run: true

- name: tas4k8s-tf-plan
  plan:
  - get: pipeline-repo
    trigger: true
    passed: [acme-tf-apply]
  - get: gcloud-credentials
    trigger: true
    passed: [acme-tf-apply]
  - get: ck
    trigger: true
  - get: kubeconfig
    trigger: true
  - get: scripts-repo
    trigger: true
  - get: tas4k8s-distro
    trigger: true
  - get: tas4k8s-tfvars
    trigger: true
  - task: unpack-and-configure-tas4k8s-distro
    config:
      inputs:
        - name: tas4k8s-distro
        - name: tas4k8s-tfvars
        - name: scripts-repo
      platform: linux
      image_resource:
        type: registry-image
        source: 
          repository: ((bby_image))
          tag: latest
      run:
        path: sh
        args:
          - -exc
          - |
            cd tas4k8s-distro
            FILENAME=$(find . -type f -name "tanzu-application-service.*" -print | head -n 1)
            tar -xvf "$FILENAME" -C /tmp
            cd ..
            DOMAIN=$(sed -n '1p' < tas4k8s-tfvars/terraform.tfvars | cut -d "=" -f 2 | tr -d "\"" | tr -d '[:space:]')
            cd scripts-repo/ytt-libs/tas4k8s
            ./scripts/configure-tas4k8s.sh "tas.$DOMAIN"
            ./scripts/cleanup-tas4k8s.sh
      outputs: 
        - name: scripts-repo
  - put: tas4k8s-tf-state
    params:
      terraform_source: pipeline-repo/terraform/gcp/tas4k8s
      plan_only: true
      var_files: [tas4k8s-tfvars/terraform.tfvars]
        
- name: tas4k8s-tf-apply
  plan:
  - get: pipeline-repo
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: gcloud-credentials
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: ck
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: kubeconfig
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: scripts-repo
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: tas4k8s-distro
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: tas4k8s-tfvars
    trigger: true
    passed: [tas4k8s-tf-plan]
  - get: tas4k8s-tf-state
    trigger: true
    passed: [tas4k8s-tf-plan]
  - task: unpack-and-configure-tas4k8s-distro
    config:
      inputs:
        - name: tas4k8s-distro
        - name: tas4k8s-tfvars
        - name: scripts-repo
      platform: linux
      image_resource:
        type: registry-image
        source: 
          repository: ((bby_image))
          tag: latest
      run:
        path: sh
        args:
          - -exc
          - |
            cd tas4k8s-distro
            FILENAME=$(find . -type f -name "tanzu-application-service.*" -print | head -n 1)
            tar -xvf "$FILENAME" -C /tmp
            cd ..
            DOMAIN=$(sed -n '1p' < tas4k8s-tfvars/terraform.tfvars | cut -d "=" -f 2 | tr -d "\"" | tr -d '[:space:]')
            cd scripts-repo/ytt-libs/tas4k8s
            ./scripts/configure-tas4k8s.sh "tas.$DOMAIN"
            ./scripts/cleanup-tas4k8s.sh
      outputs: 
        - name: scripts-repo
  - put: tas4k8s-tf-state
    params:
      terraform_source: pipeline-repo/terraform/gcp/tas4k8s
      plan_run: true

- name: tas4k8s-tf-destroy
  plan:
  - get: pipeline-repo
    trigger: false
    passed: [tas4k8s-tf-apply]
  - get: gcloud-credentials
    trigger: false
    passed: [tas4k8s-tf-apply]
  - get: ck
    trigger: false
    passed: [tas4k8s-tf-apply]
  - get: kubeconfig
    trigger: false
    passed: [tas4k8s-tf-apply]
  - get: tas4k8s-tfvars
    trigger: false
  - get: tas4k8s-tf-state
    trigger: false
    passed: [tas4k8s-tf-apply]
  - put: tas4k8s-tf-state
    params:
      terraform_source: pipeline-repo/terraform/gcp/tas4k8s
      action: destroy
      var_files: [tas4k8s-tfvars/terraform.tfvars]
    get_params:
      action: destroy

- name: acme-tf-destroy
  plan:
  - get: pipeline-repo
    trigger: false
    passed: [tas4k8s-tf-destroy]
  - get: gcloud-credentials
    trigger: true
    passed: [tas4k8s-tf-destroy]
  - get: acme-tfvars
    trigger: false
  - get: acme-tf-state
    trigger: false
    passed: [acme-tf-apply]
  - put: acme-tf-state
    params:
      terraform_source: pipeline-repo/terraform/gcp/tas4k8s/acme
      action: destroy
      var_files: [acme-tfvars/terraform.tfvars]
    get_params:
      action: destroy